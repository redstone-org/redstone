//! Input used for source generation.
//! We generate SyntaxKind enum from this.

use sourcegen::{AstTokenSource, SyntaxKindSource};

pub const SYNTAX_KIND_SOURCE: SyntaxKindSource<'_> = SyntaxKindSource {
    punctuations: &[
        ("(", "L_PAREN"),
        (")", "R_PAREN"),
        ("{", "L_CURLY"),
        ("}", "R_CURLY"),
        ("[", "L_BRACK"),
        ("]", "R_BRACK"),
        ("<", "L_ANGLE"),
        (">", "R_ANGLE"),
        (";", "SEMICOLON"),
        (",", "COMMA"),
        (".", "DOT"),
        ("...", "DOT3"),
        ("@", "AT"),
        ("::", "COLON2"),
    ],
    reserved_keywords: &[
        "abstract",
        "assert",
        "boolean",
        "break",
        "byte",
        "case",
        "catch",
        "char",
        "class",
        "const",
        "continue",
        "default",
        "do",
        "double",
        "else",
        "enum",
        "extends",
        "final",
        "finally",
        "float",
        "for",
        "if",
        "goto",
        "implements",
        "import",
        "instanceof",
        "int",
        "interface",
        "long",
        "native",
        "new",
        "package",
        "private",
        "protected",
        "public",
        "return",
        "short",
        "static",
        "strictfp",
        "super",
        "switch",
        "synchronized",
        "this",
        "throw",
        "throws",
        "transient",
        "try",
        "void",
        "volatile",
        "when",
    ],
    contextual_keywords: &[
        "exports",
        "module",
        "non-sealed",
        "open",
        "opens",
        "permits",
        "provides",
        "record",
        "required",
        "sealed",
        "to",
        "transitive",
        "uses",
        "var",
        "when",
        "with",
        "yield",
    ],
    literals: &[
        "INTEGER",
        "FLOATING_POINT",
        "BOOLEAN",
        "CHARACTER",
        "STRING",
        "TEXT_BLOCK",
        "NULL",
    ],
    nodes: &[],
    tokens: &["IDENT", "WHITESPACE", "COMMENT"],
};

// We manually set it for now, only need terminals that hold an inner value.
// TODO: Is there a cleaner way to use SyntaxKind and AST Token generation
// based on ungrammar.
pub const AST_TOKENS_SOURCE: AstTokenSource = AstTokenSource {
    tokens: &[
        "Ident",
        "Whitespace",
        "Comment",
        "Integer",
        "FloatingPoint",
        "Boolean",
        "Character",
        "String",
        "TextBlock",
    ],
};
